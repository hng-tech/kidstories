{
    "openapi": "3.0.1",
    "info": {
      "title": "Kid Story APP Api Documentation",
      "description": "Kid Story App  api documentation. <br/> By: TEAM DRAGONLEGEND <br/> Backend API Repository:https://github.com/hnginternship5/kidstories <br/> Backend URL: https://api-marketplace.herokuapp.com ",
      "termsOfService": "https://api-kidstories.herokuapp.com",
      "contact": {
        "email": "interns@hng.tech"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0.0"
    },
    "servers": [
      {
        "url": "http://localhost:8000/api/v1"
      }
    ],
    "tags": [
      {
        "name": "auth",
        "description": "Authentication"
      },
      {
        "name": "user",
        "description": "User"
      },
      {
        "name": "bookmark",
        "description": "Bookmark"
      },
      {
        "name": "category",
        "description": "Category"
      },
      {
        "name": "story",
        "description": "Story"
      },
      {
        "name": "comment",
        "description": "Comment"
      },
      {
        "name": "payment",
        "description": "Payment"
      }
    ],
    "paths": {
        "/auth/register": {
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Create a user",
            "description": "This is an endpoint to create a user",
            "requestBody": {
              "description": "user object that needs to be added",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "200": {
                "description": "created",
                "content": {}
              }
            }
            
          }
        },
        "/auth/login": {
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Login a user",
            "description": "This is an endpoint for user login",
            "requestBody": {
              "description": "user login information object",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserLogin"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "400": {
                "description": "Invalid username/password supplied",
                "content": {}
              }
            }
          }
        },
        "/auth/logout": {
          "post": {
            "tags": [
              "auth"
            ],
            "summary": "Logout a user",
            "description": "This is an endpoint for user logout",
            "responses": {
              "200": {
                "description": "successfully logout",
                "content": {}
              }
            }
          }
        },
        "/auth/user": {
          "get": {
            "tags": [
              "auth"
            ],
            "summary": "Get a login user detail",
            "description": "Returns a single user",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              },
              "404": {
                "description": "User not found",
                "content": {}
              }
            },
            "security":[
              {
                "bearerAuth":[]
              }
            ]
          }
        },
        "/auth/change-password":{
          "put": {
            "tags": [
              "auth"
            ],
            "summary": "Change user password",
            "description": "This can only be done by an authorised user.",
            "requestBody": {
              "description": "Updated user password object",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserPassword"
                  }
                }
              },
              "required": true
            },
            "responses": {
              "400": {
                "description": "Invalid user supplied",
                "content": {}
              },
              "404": {
                "description": "User not found",
                "content": {}
              }
            },
            "security":[
              {
                "bearerAuth":[]
              }
            ]
          }
        },
        "/users": {
          "get": {
            "tags": [
              "user"
            ],
            "summary": "Get all users ",
            "description": "Returns all users",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {}
              },
              "404": {
                "description": "Users not found",
                "content": {}
              }
            }
          }
        },
        "/users/{id}": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Get a user by ID",
              "description": "Returns a single user",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "ID of user to get",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                },
                "404": {
                  "description": "User not found",
                  "content": {}
                }
              }
            },
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Update a user",
              "description": "This can only be done by an authorised user.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "User ID that need to be updated",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "requestBody": {
                "description": "Updated user object",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "400": {
                  "description": "Invalid user supplied",
                  "content": {}
                },
                "404": {
                  "description": "User not found",
                  "content": {}
                }
              }
            }
        },
        "/users/{id}/profile-image": {
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Update a user",
              "description": "This can only be done by an authorised user.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "User ID that need to be updated",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "requestBody": {
                "description": "Updated user object",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "400": {
                  "description": "Invalid user supplied",
                  "content": {}
                },
                "404": {
                  "description": "User not found",
                  "content": {}
                }
              }
            }
        },
        "/bookmarks/stories/{storyId}": {
            "post": {
                "tags": [
                  "bookmark"
                ],
                "summary": "Bookmark a story",
                "description": "This is an endpoint to bookmark a story",
                "parameters": [
                    {
                      "name": "storyId",
                      "in": "path",
                      "description": "Story ID to be bookmark",
                      "required": true,
                      "schema": {
                        "type": "integer"
                      }
                    }
                ],
                "responses": {
                  "200": {
                    "description": "created",
                    "content": {}
                  }
                }
            },
            "delete": {
                "tags": [
                  "bookmark"
                ],
                "summary": "Deletes a bookmark",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "Story ID of bookmark to be deleted",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                  "400": {
                    "description": "Invalid ID supplied",
                    "content": {}
                  },
                  "404": {
                    "description": "Bookmark not found",
                    "content": {}
                  }
                }
            }
        },
        "/categories": {
            "get": {
              "tags": [
                "category"
              ],
              "summary": "Get all categories ",
              "description": "Returns all categories",
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {}
                },
                "404": {
                  "description": "Category not found",
                  "content": {}
                }
              }
            }
        },
        "/categories/{id}": {
            "get": {
              "tags": [
                "category"
              ],
              "summary": "Get a category by ID",
              "description": "Returns a single category",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "ID of category to get",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CategoryData"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Ccategory not found",
                  "content": {}
                }
              }
            }
        },
        "/categories/{id}/stories": {
            "get": {
              "tags": [
                "category"
              ],
              "summary": "Get a category by ID and user",
              "description": "Returns a single category",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "ID of category to get",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CategoryData"
                      }
                    }
                  }
                },
                "404": {
                  "description": "Ccategory not found",
                  "content": {}
                }
              }
            }
        },
        "/stories": {
            "get": {
              "tags": [
                "story"
              ],
              "summary": "Get all stories ",
              "description": "Returns all stories",
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {}
                }
              }
            },
            "post": {
                "tags": [
                  "story"
                ],
                "summary": "Create a story",
                "description": "This is an endpoint to create a story",
                "responses": {
                  "200": {
                    "description": "created",
                    "content": {}
                  }
                },
                "security":[
                    {
                      "bearerAuth":[]
                    }
                ]
            }
        },
        "/comments":{
            "post": {
                "tags": [
                  "comment"
                ],
                "summary": "Create a new comment",
                "description": "This is an endpoint to create a new comment",
                "responses": {
                  "200": {
                    "description": "created",
                    "content": {
                        "application/json": {
                            "schema": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/commentData"
                              }
                            }
                        }
                    }
                  }
                },
                "security":[
                    {
                      "bearerAuth":[]
                    }
                ]
            }
        },
        "/comments/{id}": {
            "put": {
                "tags": [
                  "comment"
                ],
                "summary": "Update a story comment",
                "description": "This can only be done by an authorised user.",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "Comment ID that need to be updated",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "requestBody": {
                  "description": "Updated comment body",
                  "content": {
                    "application/x-www-form-urlencoded": {
                        "schema": {
                          "properties": {
                            "body": {
                              "type": "string",
                              "description": "Updated body of the comment"
                            }
                          }
                        }
                      }
                  },
                  "required": true
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/CommentDataUpdate"
                            }
                          }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                  "properties": {
                                    "message": {
                                      "type": "string",
                                      "example": "No query results for model"
                                    },
                                    "error": {
                                      "type": "string",
                                      "example": "Resource not found"
                                    }
                                  }
                                }
                            }
                        }
                    }
                },
                "security":[
                    {
                        "bearerAuth":[] 
                    }
                ]
              },
            "delete": {
                "tags": [
                  "comment"
                ],
                "summary": "Deletes a comment",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "description": "ID of comment to be deleted",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                    "204":{
                        "description":"",
                        "content":{
                            "application/json":{
                                "schema":{
                                    "properties":{
                                        "status":{
                                            "type":"integer",
                                            "example":204
                                        },
                                        "message":{
                                            "type":"string",
                                            "example":"created"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                    "message": {
                                        "type": "string",
                                        "example": "No query results for model"
                                    },
                                    "error": {
                                        "type": "string",
                                        "example": "Resource not found"
                                    }
                                    }
                                }
                            }
                        }
                    }
                },
                "security":[
                    {
                        "bearerAuth":[] 
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
          "User": {
            "type": "object",
            "properties": {
              "photo": {
                "type": "string",
                "format":"binary"
              },
              "title": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "role": {
                "type": "string"
              }
            }
          },
          "UserLogin": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          "UserPassword": {
            "type": "object",
            "properties": {
              "old_password": {
                "type": "string"
              },
              "new_password": {
                "type": "string"
              },
              "confirm_password": {
                "type": "string"
              }
            }
          },
          "CategoryData": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "success"
              },
              "code": {
                "type": "integer",
                "example": 200
              },
              "message": {
                "type": "string",
                "example": "ok"
              },
              "data": {
                "$ref": "#/components/schemas/Category"
              }
            }
          },
          "Category": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Tail"
              },
              "image_name": {
                "type": "string"
              },
              "image_url": {
                "type": "string"
              }
            }
          },
          "CommentData": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "example": 200
              },
              "message": {
                "type": "string",
                "example": "created"
              },
              "data": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "CommentDataUpdate": {
            "type": "object",
            "properties": {
              "status": {
                "type": "integer",
                "example": 201
              },
              "message": {
                "type": "string",
                "example": "created"
              },
              "data": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "Comment": {
            "type": "object",
            "properties": {
              "story_id": {
                "type": "integer",
                "example": 1
              },
              "user_id": {
                "type": "integer",
                "example":1
              },
              "body": {
                "type": "string"
              }
            }
          }
        },
        "securitySchemes": {
            "bearerAuth": {
              "type": "http",
              "scheme":"bearer",
              "bearerFormat":"JWT" 
            }
        }
    }
}